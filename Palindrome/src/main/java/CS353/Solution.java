package CS353;

import java.util.List;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;

public class Solution {
    /*
     * @param s: A string
     * 
     * @return: A list of lists of string
     */
    public List<List<String>> partition(String s) {
        // HashMap<Integer, String> h = new HashMap<Integer, String>();
        // List<List<String>> result = new ArrayList();
        // List<String> l = new ArrayList<String>();
        // if (s == null) {
        // return new ArrayList();
        // } else if (s.length() == 1) {
        // l.add(s.charAt(0) + "");
        // result.add(l);
        // return result;
        // }
        // helper(s, l, h);

        // return result;

        int n = s.length();

        // To Store all palindromic partitions
        List<List<String>> allPart = new ArrayList();

        // To store current palindromic partition
        Deque<String> currPart = new LinkedList<String>();

        // Call recursive function to generate
        // all partiions and store in allPart
        return allPalPartitonsUtil(allPart, currPart, 0, n, s);

        // Print all partitions generated by above call
        // for (int i = 0; i < allPart.size(); i++) {
        // for (int j = 0; j < allPart.get(i).size(); j++) {
        // System.out.print(allPart.get(i).get(j) + " ");
        // }
        // System.out.println();
        // }
    }

    private List<List<String>> allPalPartitonsUtil(List<List<String>> allPart, Deque<String> currPart, int start, int n,
            String input) {
        // If 'start' has reached len
        if (start >= n) {
            allPart.add(new ArrayList(currPart));
            return allPart;
        }

        // Pick all possible ending points for substrings
        for (int i = start; i < n; i++) {

            // If substring str[start..i] is palindrome
            if (isPalindrome(input, start, i)) {

                // Add the substring to result
                currPart.addLast(input.substring(start, i + 1));

                // Recur for remaining remaining substring
                allPalPartitonsUtil(allPart, currPart, i + 1, n, input);

                // Remove substring str[start..i] from current
                // partition
                currPart.removeLast();
            }
        }

        return allPart;
    }

    // private void helper(String s, List<String> l, HashMap<Integer, String> h) {

    // }

    private boolean isPalindrome(String input, int start, int i) {
        while (start < i) {
            if (input.charAt(start++) != input.charAt(i--))
                return false;
        }
        return true;
    }

    // private boolean isPalindrome(String s) {
    //     for (int startIdx = 0, endIdx = s.length() - 1; startIdx < endIdx; startIdx++, endIdx--) {
    //         if (s.charAt(startIdx) != s.charAt(endIdx)) {
    //             return false;
    //         }
    //     }
    //     return true;
    // }

}